task default: :sync_releases
require 'octokit'
require_relative 'ghapi'

desc 'Sync local releases with Erlang OTP releases'
task :sync_releases do
  authenticated = !ENV['GITHUB_TOKEN'].nil?
  client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])

  puts 'Getting OTP releases...'
  otp_releases = get_all_releases('erlang/otp')
  puts "OTP release count: #{otp_releases.size}"

  puts 'Getting buildpack OTP releases...'
  build_releases = get_all_releases('elixir-buildpack/heroku-otp')
  puts "Buildpack OTP release count: #{build_releases.size}"

  missing_releases = otp_releases - build_releases
  missing_releases.select!{|rel| rel =~ /\AOTP (?<version>(\d{1,}\.){1,}\d{1,})\z/ }

  if missing_releases.size == 0
    puts 'No missing releases.'
    next
  end

  puts "#{missing_releases.size} missing release(s)"

  missing_releases.sort.each_with_index do |release_name, index|
    next if index > 5
    release_version = release_name.split(' ').last

    if authenticated
      puts "Creating #{release_name}"
      client.create_release(
        'elixir-buildpack/heroku-otp',
        release_version,
        {
          name: release_name,
          body: "#{release_name} build for Heroku.",
          prerelease: false,
          draft: false
        }
      )
    else
      puts "Skipping #{release_name}"
    end
  end
end

def get_all_releases(repo)
  repo_owner = repo.split('/').first
  repo_name = repo.split('/').last
  last_result = GHAPI::Client.query(
    GHAPI::GetReleases,
    variables: {
      repo_owner: repo_owner,
      repo_name: repo_name
    }
  )

  release_count = last_result.data.repository.releases.total_count
  releases = last_result.data.repository.releases.nodes.map(&:name)
  last_cursor = last_result.data.repository.releases.edges.map(&:cursor).last

  until last_cursor.nil?
    last_result = GHAPI::Client.query(
      GHAPI::GetReleases,
      variables: {
        repo_owner: repo_owner,
        repo_name: repo_name,
        after: last_cursor
      }
    )

    releases += last_result.data.repository.releases.nodes.map(&:name)
    releases = releases.uniq
    last_cursor = last_result.data.repository.releases.edges.map(&:cursor).last
  end

  releases
end
