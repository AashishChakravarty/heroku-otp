task default: :sync_releases
require 'octokit'

desc 'Sync local releases with Erlang OTP releases'
task :sync_releases do
  authenticated = !ENV['GITHUB_TOKEN'].nil?
  client = Octokit::Client.new(access_token: ENV['GITHUB_TOKEN'])

  otp_releases = get_all_releases(client, 'erlang/otp')
  build_releases = get_all_releases(client, 'elixir-buildpack/heroku-otp')

  missing_releases = otp_releases - build_releases
  missing_releases.select!{|rel| rel =~ /\AOTP (?<version>(\d{1,}\.){1,}\d{1,})\z/ }

  if missing_releases.size == 0
    puts 'No missing releases.'
    next
  end

  puts "#{missing_releases.size} missing release(s)"

  missing_releases.sort.each_with_index do |release_name, index|
    next if index > 5
    release_version = release_name.split(' ').last

    if authenticated
      puts "Creating #{release_name}"
      client.create_release(
        'elixir-buildpack/heroku-otp',
        release_version,
        {
          name: release_name,
          body: "#{release_name} build for Heroku.",
          prerelease: false,
          draft: false
        }
      )
    else
      puts "Skipping #{release_name}"
    end
  end
end

def get_all_releases(client, repo)
  gh_repo = client.repo repo
  gh_release_link = gh_repo.rels[:releases]
  last_release_page = gh_release_link.get(query: {per_page: 100, page: 0})
  releases = last_release_page.data.map{|rel| rel[:name] }

  until last_release_page.rels[:next].nil?
    last_release_page = last_release_page.rels[:next].get
    releases += last_release_page.data.map{|rel| rel[:name] }
  end

  releases
end
