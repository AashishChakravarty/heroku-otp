name: Build Erlang OTP For Heroku

on:
  push:
    branches:
      - master

jobs:
  build_docker_cache:
    name: Cache The Stacks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        stack:
          - heroku-18
          - heroku-20

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Caching
        uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true
        with:
          key: ${{ matrix.stack }}

      - name: Build Heroku Stack Image
        run: docker build -t ${{ matrix.stack }} - < stacks/${{ matrix.stack }}.Dockerfile

  build_erlang_versions:
    name: Build Erlang Versions
    runs-on: ubuntu-latest
    needs: build_docker_cache

    strategy:
      fail-fast: false
      matrix:
        stack:
          - heroku-18
          - heroku-20
        otp:
          - '23.1.4'
          - '23.1.3'
          - '23.1.2'
          - '23.1.1'
          - '23.1'
          - '20.3.8.8'

    steps:
      - name: Release Check
        id: release-check
        shell: bash
        run: |
          wget -o release-check.log https://github.com/heroku-elixir/otp-builds/releases/download/${{ matrix.otp }}-${{ matrix.stack }}/${{ matrix.otp }}-${{ matrix.stack }}.tar.gz || true
          if grep -q "302 Found" release-check.log; then
            echo "::set-output name=release-exists::true"
          else
            echo "::set-output name=release-exists::false"
          fi

      - name: Checkout
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        uses: actions/checkout@v2

      - name: Setup Erlang Build
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        run: |
          mkdir -p build/mount
          cd build
          wget https://github.com/erlang/otp/archive/OTP-${{ matrix.otp }}.tar.gz
          tar -zxf OTP-${{ matrix.otp }}.tar.gz
          mv otp-OTP-${{ matrix.otp }}/ mount/

      - name: Docker Caching
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true
        with:
          key: ${{ matrix.stack }}

      - name: Build Heroku Stack Image
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        run: docker build -t ${{ matrix.stack }} - < stacks/${{ matrix.stack }}.Dockerfile

      - name: Build Erlang
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        working-directory: build
        run: |
          docker run -v $(pwd)/mount:/build -w /build/otp-OTP-${{ matrix.otp }} ${{ matrix.stack }} ./otp_build autoconf
          docker run -v $(pwd)/mount:/build -w /build/otp-OTP-${{ matrix.otp }} ${{ matrix.stack }} ./configure --with-ssl --enable-dirty-schedulers
          docker run -v $(pwd)/mount:/build -w /build/otp-OTP-${{ matrix.otp }} ${{ matrix.stack }} make
          docker run -v $(pwd)/mount:/build -w /build/otp-OTP-${{ matrix.otp }} ${{ matrix.stack }} make release
          docker run -v $(pwd)/mount:/build -w /build/otp-OTP-${{ matrix.otp }} ${{ matrix.stack }} chmod -R 777 release

      - name: Create Tarball
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        working-directory: build
        run: |
          mkdir out
          mv mount/otp-OTP-${{ matrix.otp }}/release/x86_64-unknown-linux-gnu/ OTP-${{ matrix.otp }}
          tar -zcf out/OTP-${{ matrix.otp }}.tar.gz OTP-${{ matrix.otp }}

      - name: Create Release
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.otp }}-${{ matrix.stack }}
          release_name: OTP ${{ matrix.otp }} for ${{ matrix.stack }}
          body: OTP ${{ matrix.otp }} for ${{ matrix.stack }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        if: ${{ steps.release-check.outputs.release-exists == 'false' }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: build/out/OTP-${{ matrix.otp }}.tar.gz
          asset_name: ${{ matrix.otp }}-${{ matrix.stack }}.tar.gz
          asset_content_type: application/gzip
